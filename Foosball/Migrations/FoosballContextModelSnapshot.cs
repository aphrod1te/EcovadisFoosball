// <auto-generated />
using System;
using Foosball.Logic.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Foosball.Migrations
{
    [DbContext(typeof(FoosballContext))]
    partial class FoosballContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FinishedFoosballGameSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoosballGameSetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FoosballGameSetId")
                        .IsUnique();

                    b.ToTable("FoosballGameFinishedSets");
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EndDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoosballGameScoreId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TableId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FoosballGameScoreId")
                        .IsUnique();

                    b.HasIndex("TableId")
                        .IsUnique()
                        .HasName("IX_Available_Table")
                        .HasFilter("[EndDate] IS NULL");

                    b.HasIndex("TableId", "StartDate")
                        .IsUnique();

                    b.ToTable("FoosballGames");

                    b.HasCheckConstraint("CK_EndDate_GreaterThan_StartDate", "[EndDate] > [StartDate]");

                    b.HasCheckConstraint("CK_StartDate_In_Future", "[StartDate] > CAST((((JulianDay('now', 'localtime') - 2440587.5)*86400.0) + 62135596800) * 10000000 AS BIGINT)");
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballGameScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FoosballGameScores");
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballGameSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoosballGameScoreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamAScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamBScore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FoosballGameScoreId");

                    b.ToTable("FoosballGameSets");

                    b.HasCheckConstraint("TeamAScore_Positive", "[TeamAScore] >= 0");

                    b.HasCheckConstraint("TeamBScore_Positive", "[TeamBScore] >= 0");
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FoosballTeamPlayers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "First"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Second"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Third"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fourth"
                        });
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballPlayerSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoosballGameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoosballGameId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamAId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamBId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FoosballGameId")
                        .IsUnique();

                    b.HasIndex("TeamAId");

                    b.HasIndex("TeamBId");

                    b.ToTable("FoosballPlayerSetups");
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FoosballTables");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FoosballTeams");
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballTeamPlayer", b =>
                {
                    b.Property<int>("FoosballPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoosballTeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FoosballPlayerId", "FoosballTeamId");

                    b.HasIndex("FoosballTeamId");

                    b.ToTable("FoosballTeamPlayer");
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FinishedFoosballGameSet", b =>
                {
                    b.HasOne("Foosball.Logic.Persistence.Entities.FoosballGameSet", "Set")
                        .WithOne("FinishedSet")
                        .HasForeignKey("Foosball.Logic.Persistence.Entities.FinishedFoosballGameSet", "FoosballGameSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballGame", b =>
                {
                    b.HasOne("Foosball.Logic.Persistence.Entities.FoosballGameScore", "Score")
                        .WithOne("Game")
                        .HasForeignKey("Foosball.Logic.Persistence.Entities.FoosballGame", "FoosballGameScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foosball.Logic.Persistence.Entities.FoosballTable", "Table")
                        .WithMany("FoosballGames")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballGameSet", b =>
                {
                    b.HasOne("Foosball.Logic.Persistence.Entities.FoosballGameScore", "Score")
                        .WithMany("Sets")
                        .HasForeignKey("FoosballGameScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballPlayerSetup", b =>
                {
                    b.HasOne("Foosball.Logic.Persistence.Entities.FoosballGame", "Game")
                        .WithOne("FoosballPlayerSetup")
                        .HasForeignKey("Foosball.Logic.Persistence.Entities.FoosballPlayerSetup", "FoosballGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foosball.Logic.Persistence.Entities.FoosballTeam", "TeamA")
                        .WithMany()
                        .HasForeignKey("TeamAId");

                    b.HasOne("Foosball.Logic.Persistence.Entities.FoosballTeam", "TeamB")
                        .WithMany()
                        .HasForeignKey("TeamBId");
                });

            modelBuilder.Entity("Foosball.Logic.Persistence.Entities.FoosballTeamPlayer", b =>
                {
                    b.HasOne("Foosball.Logic.Persistence.Entities.FoosballPlayer", "FoosballPlayer")
                        .WithMany("FoosballTeamPlayers")
                        .HasForeignKey("FoosballPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foosball.Logic.Persistence.Entities.FoosballTeam", "FoosballTeam")
                        .WithMany("FoosballTeamPlayers")
                        .HasForeignKey("FoosballTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
